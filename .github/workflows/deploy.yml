name: Deploy Resume

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Ruby for Jekyll
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      # Install Jekyll and dependencies
      - name: Install Jekyll
        run: |
          gem install bundler jekyll
          bundle install

      # Build Jekyll site
      - name: Build with Jekyll
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production

      # Setup Node.js for PDF generation
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node dependencies
        run: |
          npm init -y
          npm install puppeteer

      # Generate PDF from the built Jekyll site
      - name: Generate PDF
        run: |
            cat << 'EOF' > generate-pdf.js
            const puppeteer = require('puppeteer');
            const fs = require('fs');
            
            (async () => {
                try {
                const browser = await puppeteer.launch({
                    headless: "new",
                    args: ['--no-sandbox', '--disable-setuid-sandbox']
                });
                
                const page = await browser.newPage();
                
                // Set viewport first
                await page.setViewport({
                    width: 1200,
                    height: 800
                });

                // Read the CSS file content
                const cssContent = fs.readFileSync('_site/assets/css/styles.css', 'utf8');
                
                // Navigate to the HTML file
                await page.goto(`file:${process.cwd()}/_site/index.html`, {
                    waitUntil: ['networkidle0', 'domcontentloaded']
                });

                // Inject styles directly into the page
                await page.addStyleTag({ content: cssContent });

                // Use evaluate to ensure everything is loaded
                await page.evaluate(() => {
                    return new Promise((resolve) => {
                    // Wait for images and fonts to load
                    if (document.readyState === 'complete') {
                        resolve();
                    } else {
                        window.addEventListener('load', resolve);
                    }
                    });
                });

                // Generate PDF with proper settings
                await page.pdf({
                    path: '_site/resume.pdf',
                    format: 'A4',
                    margin: {
                    top: '20px',
                    right: '20px',
                    bottom: '20px',
                    left: '20px'
                    },
                    printBackground: true,
                    preferCSSPageSize: true
                });

                await browser.close();
                console.log('PDF generated successfully');
                } catch (error) {
                console.error('Error generating PDF:', error);
                process.exit(1);
                }
            })();
            EOF
            node generate-pdf.js

      - name: Verify PDF Generation
        run: |
            if [ ! -f "_site/resume.pdf" ]; then
                echo "PDF was not generated!"
                exit 1
            fi
            echo "PDF was generated successfully"

      # Validate HTML (using the Jekyll-built files)
      - name: Validate HTML
        run: |
          npm install html-validate
          npx html-validate _site/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Upload PDF as artifact
      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf
          path: _site/resume.pdf
          if-no-files-found: error

      # Create release with PDF if this is a tag
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: _site/resume.pdf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Jekyll builds
        uses: actions/cache@v3
        with:
          path: |
            _site
            .jekyll-cache
          key: ${{ runner.os }}-jekyll-${{ hashFiles('**/*') }}
          restore-keys: |
            ${{ runner.os }}-jekyll-