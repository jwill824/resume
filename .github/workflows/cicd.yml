name: CI/CD

on:
  push:
    branches: ['**']  # Run on all branches
    tags-ignore: ['*']  # Ignore tag pushes
  pull_request:
  workflow_dispatch:
    inputs:
      update_baseline:
        description: 'Update visual regression baseline'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  detect-branch:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch-name.outputs.branch }}
      is-main: ${{ steps.branch-check.outputs.is_main }}
    steps:
      - id: branch-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - id: branch-check
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi

  lint:
    needs: detect-branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: |
          echo "Running lint on branch: ${{ needs.detect-branch.outputs.branch-name }}"

  test:
    needs: [detect-branch, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - name: Build Jekyll
        run: npm run build
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: |
          npx playwright install chromium --with-deps
          npm install -g @lhci/cli@0.13.x
      - run: npm test
      - run: npm run test:performance
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: github.event_name == 'pull_request'
        run: |
          score=$(cat .lighthouseci/manifest.json | jq -r '.[] | .summary.performance')
          if (( $(echo "$score < 0.9" | bc -l) )); then
            echo "Performance score below threshold: $score"
            exit 1
          fi
      - if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-diff
          path: tests/results/diff.png
          retention-days: 7
      - run: |
          echo "Running tests on branch: ${{ needs.detect-branch.outputs.branch-name }}"

  deploy:
    needs: [detect-branch, test]
    if: needs.detect-branch.outputs.is-main == 'true'  # Only deploy on main
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - name: Build Jekyll
        run: npm run build
      - run: node scripts/generate-pdf.js
      - run: |
          if [ ! -f "_site/resume.pdf" ]; then
              echo "PDF was not generated!"
              exit 1
          fi
      - uses: actions/configure-pages@v4
      - uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
      - id: deployment
        uses: actions/deploy-pages@v4
      - uses: actions/upload-artifact@v4
        with:
          name: resume-pdf
          path: _site/resume.pdf
          if-no-files-found: error

  release:
    needs: [detect-branch, deploy]
    if: needs.detect-branch.outputs.is-main == 'true'  # Only release on main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: version-bump
        run: |
          current_version=$(node -p "require('./package.json').version")
          new_version=$(node -p "v=require('./package.json').version.split('.'); v[2]++; v.join('.')")
          npm version $new_version --no-git-tag-version
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create Release Commit
        run: |
          git add package.json package-lock.json
          git commit -m "chore: release v${{ steps.version-bump.outputs.new_version }}"

      - name: Push Changes
        run: git push

      - name: Create Tag
        run: |
          git tag v${{ steps.version-bump.outputs.new_version }}
          git push origin v${{ steps.version-bump.outputs.new_version }}

      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: resume-pdf
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-bump.outputs.new_version }}
          name: Release v${{ steps.version-bump.outputs.new_version }}
          files: artifacts/resume.pdf
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
